/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tinyuml.ui;

import java.awt.Dialog;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.TreeMap;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import org.tinyuml.model.Sequence;
import org.tinyuml.ui.model.SequenceModel;
import org.tinyuml.util.ApplicationResources;
import org.tinyuml.util.TableAdjuster;

/**
 *
 * @author cml
 */
public class ManageSequences extends javax.swing.JDialog {

	/**
	 * Creates new form ManageSequences
	 */
	private boolean isOk;
	
	private SequenceModel sequenceModel = new SequenceModel();
	private TableAdjuster adjuster = new TableAdjuster();
	
	public ManageSequences(java.awt.Window parent, TreeMap<String, Sequence> aSequences) {
		
		super(parent, Dialog.ModalityType.APPLICATION_MODAL);
		
		for(Sequence seq : aSequences.values()) {
			
			sequenceModel.addEntry(seq);
		}
		
		initComponents();
		myInit();
	}
	
	public void myInit() {
		
		sequenceTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		sequenceTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		adjuster.adjustColumns(sequenceTable);
		
		sequenceTable.addPropertyChangeListener( new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent e) {
				
				System.out.println(" propertyChange ");
				adjuster.adjustColumns(sequenceTable);
			}
		});
		
		sequenceTable.getModel().addTableModelListener( new TableModelListener() {

			@Override
			public void tableChanged(TableModelEvent e) {
				
				System.out.println(" tableChanged ");
				
				if (e.getType() == TableModelEvent.UPDATE
						&& e.getColumn() > 0) {
					
					int column = sequenceTable.convertColumnIndexToView(e.getColumn());
					
					adjuster.adjustColumn( column, sequenceTable );

				} else {

					adjuster.adjustColumns(sequenceTable);
				}
			}
		});
		
		sequenceTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				
				int index = sequenceTable.convertRowIndexToModel(sequenceTable.getSelectedRow());
				
				System.out.println(" selectChange - index - " + index + " - isAdjusting - " + e.getValueIsAdjusting());
				
				if(e.getValueIsAdjusting())
					return;
				else if(index < 0)
					removeSequenceButton.setEnabled(false);
				else
					removeSequenceButton.setEnabled(true);
			}
		});
	}
	
	public TreeMap<String, Sequence> getSequences() {
		
		TreeMap<String, Sequence> sequences = new TreeMap<String, Sequence>();
		
		for (Sequence seq : sequenceModel.getEntries()) {
			
			if(seq.checkValid()) {
				
				sequences.put(seq.getName(), seq);
			}
		}
		
		return sequences;
	}
	
	public boolean isOk() { return isOk; }

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sequenceTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        addSequenceButton = new javax.swing.JButton();
        removeSequenceButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Sequences");

        sequenceTable.setModel(sequenceModel);
        jScrollPane1.setViewportView(sequenceTable);

        cancelButton.setText(ApplicationResources.getInstance().getString("stdcaption.cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText(ApplicationResources.getInstance().getString("stdcaption.ok"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        addSequenceButton.setText("Přidat generátor");
        addSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSequenceButtonActionPerformed(evt);
            }
        });

        removeSequenceButton.setText("Odebrat generátor");
        removeSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSequenceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addSequenceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeSequenceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(addSequenceButton)
                    .addComponent(removeSequenceButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		
		dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

		isOk = true;
		dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void addSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSequenceButtonActionPerformed

		sequenceModel.addEntry(Sequence.getPrototype().create("Sequence" + sequenceModel.getEntries().size() + 1));
		
		int row = sequenceModel.getRowCount() - 1;
		
		sequenceTable.changeSelection(sequenceTable.convertRowIndexToView(row), 0, false, false);
		sequenceTable.requestFocus();
    }//GEN-LAST:event_addSequenceButtonActionPerformed

    private void removeSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSequenceButtonActionPerformed
		
		/** TODO DODELAT KONTROLU, ZDA NEMA GENERATOR ZAVISLOST NA NEJAKEM OBJEKTU (TREBA NA TRIGGERU U NEJAKE TABULKY - GENEROVANI ID)
		 *  
		 *	PREDSTAVA
		 *	nejlepe asi sekvence sama obsahuje informace o zavislosti na nejakem objektu a pokud je ma, neni mozne ji vymazat, ale je mozne je vypsat
		 *  asi na zavislosti udelat nejaky objekt, nebot jsou u vice obejktu v db
		**/
		
		int row = sequenceTable.convertRowIndexToModel(sequenceTable.getSelectedRow());
		
		if(row >= 0) {
			
			sequenceModel.removeEntryAt(row--);
			
			if(row >= 0)
				sequenceTable.changeSelection(sequenceTable.convertRowIndexToView(row), 0, false, false);
		}
    }//GEN-LAST:event_removeSequenceButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSequenceButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeSequenceButton;
    private javax.swing.JTable sequenceTable;
    // End of variables declaration//GEN-END:variables
}
